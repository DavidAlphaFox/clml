 TS-ANOMALY-DETECTION(4): (setf sample-ts
                            (time-series-data
                             (read-data-from-file
                              "https://mmaul.github.io/clml.data/sample/traffic-balance.csv" 
                              :type :csv
                              :csv-type-spec (cons 'string
                                                   (make-list 6 :initial-element 'double-float)))
                             :frequency 12 :except '(0) :time-label 0))
 ; Autoloading for (SETF EOL-CONVENTION):
 ; Fast loading from bundle code/efmacs.fasl.
 ; Fast loading from bundle code/ef-e-anynl.fasl.
 ;   Fast loading from bundle code/ef-e-crlf.fasl.
 ;   Fast loading from bundle code/ef-e-cr.fasl.
 ; Fast loading from bundle code/ef-e-crcrlf.fasl.
 #<TIME-SERIES-DATASET >
 DIMENSIONS: IF1 | IF2 | IF3 | IF4 | IF5 | IF6
 TYPES:      NUMERIC | NUMERIC | NUMERIC | NUMERIC | NUMERIC | NUMERIC
 NUMBER OF DIMENSIONS: 6
 FREQUENCY:  12
 START:      (1 1)
 END:        (85 7)
 POINTS:     1015
 TIME-LABEL: TIME
 TS-ANOMALY-DETECTION(5): (loop with detector = (make-db-detector 
                                                 (sub-ts sample-ts :start '(1 1) :end '(2 12)))
                              for p across (ts-points (sub-ts sample-ts :start '(3 1)))
                              collect (funcall detector (ts-p-pos p)))
 (7.689004308083502e-4 8.690742068634405e-4 0.0014640360422599752 9.645504419952822e-4 0.002189430044882701 0.0022804402419548397 8.653971028227403e-4 0.0021245846566718685 0.0021297890535286745
  0.003035579690776613 ...)
 TS-ANOMALY-DETECTION(6): (loop with detector = (make-periodic-detector
                                                 (sub-ts sample-ts :start '(1 1) :end '(2 12)))
                              for p across (ts-points (sub-ts sample-ts :start '(3 1)))
                              collect (funcall detector (ts-p-pos p)))
 ((:SCORE 0.15980001156818346 :LOCAL-SCORES (-0.011247495797210605 0.04067641708837213 0.07657475988236122 0.026173388386296143 -0.001005722797717759 -0.13117336322290166))
  (:SCORE 0.16606559269099325 :LOCAL-SCORES (-0.04404576382434579 0.08836079938698248 0.06427181525186569 0.008060984870295258 6.037724071195098e-5 -0.11672432427082227))
  (:SCORE 0.0835963350476519 :LOCAL-SCORES (0.02860344056963936 0.02049834345000817 0.018558627759386243 0.005805395166900154 -1.7563302955435247e-4 -0.07329208280202894))
  (:SCORE 0.10895276517361178 :LOCAL-SCORES (0.06171796944486013 0.02627577908981959 -0.0013938026860552477 7.108933807211727e-4 -0.0015292225676566903 -0.08581498358943485))
  (:SCORE 0.14372822478142372 :LOCAL-SCORES (0.019119719424318164 0.06530386435337952 -0.03223066630047898 0.05779465755012304 -0.0021226015789952857 -0.10789806554381363))
  (:SCORE 0.1214316386275602 :LOCAL-SCORES (0.08180945936566704 -0.01666669357385849 0.01789677418744477 -0.08623381474472612 -5.783555512765765e-4 0.003743461124108086))
  (:SCORE 0.16328621183435152 :LOCAL-SCORES (0.09252923344792947 0.04206473653695766 0.03524081165133149 -0.10442527700870255 -6.866050459105892e-4 -0.06471611713622019))
  (:SCORE 0.17165824330218574 :LOCAL-SCORES (0.1124055553487212 -0.04483642919806279 0.06943579226133692 -0.08609866163195316 -1.3815655640593742e-4 -0.05081348776600684))
  (:SCORE 0.14705276128118872 :LOCAL-SCORES (0.03176665855145954 -0.05169044126068538 0.11199895677113193 -0.020881754613730465 -0.0013360512015534781 -0.06969391195126472))
  (:SCORE 0.1753941034019109 :LOCAL-SCORES (0.0926869320817864 -0.04500698002481467 0.08111355541737571 -0.010867820410934509 -0.0027675310185543865 -0.11509576770374046)) ...)
