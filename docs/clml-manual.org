#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t *:t TeX:nil LaTeX:nil f:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+HTML:     <div class="wrapper">
#+HTML:      <div id="header">
#+HTML:         <nav>
#+HTML:           <li class="fork"><a href="https://github.com/mmaul/clml">View On GitHub</a></li>
#+HTML:           <li class="downloads"><a href="https://github.com/mmaul/clml/zipball/master">ZIP</a></li>
#+HTML:           <li class="downloads"><a href="https://github.com/mmaul/clml/tarball/master">TAR</a></li>
#+HTML:           <li class="title">DOWNLOADS</li>
#+HTML:         </nav>
#+HTML:       </div><!-- end header -->
#+HTML:       <section>
#+HTML:         <div id="main_content">
#+TITLE:     CLML Common Lisp Machine Learning
#+AUTHOR:    Salvi P,Ai(Bter, Naganuma Shigeta, Tada Masashi, Abe Yusuke, Jianshi Huang, Fujii Ryo, Abe Seika, Kuroda Hisao, Mike Maul


* Overview

The CLML Machine-Learning is a high performance and large scale statistical
machine learning package written in Common Lisp developed by MSI.  

* Installation
#+INCLUDE: "./INSTALL.org" :minlevel 2

* QUOTE Loading/Using the library
#+INCLUDE: "./USING.org" :minlevel 2

* Machine-Learning Packages

The CLML package hierarchy is to two groups primary and supporting.
The primary group contains the CLML functionality. The secondary group
supports the CLML library. The primary group consists of top level
package hierarchies:
+ CLML
+ HJS

The HJS package hierarchy contains for the most part utilities and base functionality such
as dataset access, matrix and vector manipulation, missing value
handling, and sum algorithimic support for k-means and eigensystems.
The CLML package hierarchy contains the high level functionality.

The secondary package hierarchies consist of
+ blas
+ lapack
+ future [Located in addons]
+ fork-future [Located in addons]
+ blas-ffi (Intel MKL blas interface) [Located in addons]
+ lapack-ffi (Intel MKL blas interface) [Located in addons]

For Intel MKL enablement BLAS_FFI and LAPACK-FFI must be loaded before
loading CLML

At this time not all packages contain detailed documentation please refer to the
source and tests contained in the CLML.EXTRAS system.

#+INCLUDE: "./api/index.org" :minlevel 1

** clml.statistics Statistics
** Requirements
The package does not depend on any libraries (yet). Any ANSI-compliant
Common Lisp should be enough. However, to load it easily, you need the
ASDF package (http://www.cliki.net/asdf).
** Usage
*** One-valued data
There is a range of functions that operate on a sequence of data.
**** mean (seq)
Returns the mean of SEQ.
**** median (seq)
Returns the median of SEQ.
(Variant: median-on-sorted (sorted-seq))
**** discrete-quantile (seq cuts)
Returns the quantile(s) of SEQ at the given cut point(s). CUTS can be a
single value or a list.
(Variant: discrete-quantile-on-sorted (sorted-seq cuts))
**** five-number-summary (seq)
Returns the "five number summary" of SEQ, ie. the discrete quantiles at the
cut points 0, 1/4, 1/2, 3/4 and 1.
(Variant: five-number-summary-on-sorted (sorted-seq))
**** range (seq)
Returns the difference of the maximal and minimal element of SEQ.
**** interquartile-range (seq)
Returns the interquartile range of SEQ, ie. the difference of the discrete
quantiles at 3/4 and 1/4.
(Variant: interquartile-range-on-sorted (sorted-seq))
**** mean-deviation (seq)
Returns the mean deviation of SEQ.
**** variance (seq)
Returns the variance of SEQ.
**** standard-deviation (seq &key populationp)
Returns the standard deviation of SEQ.
If populationp is true, the returned value is the population standard deviation.
Otherwise, it is the sample standard deviation.
*** Two-valued data
These functions operate on two sequences.
**** covariance (seq1 seq2)
Returns the covariance of SEQ1 and SEQ2.
**** linear-regression (seq1 seq2)
Fits a line y = A + Bx on the data points from SEQ1 x SEQ2. Returns (A B).
**** correlation-coefficient (seq1 seq2)
Returns the correlation coefficient of SEQ1 and SEQ2, ie.
covariance / (standard-deviation1 * standard-deviation2).
**** spearman-rank-correlation (seq1 seq2)
Returns the Spearman rank correlation, ie. the coefficient based on just
the relative size of the given values.
**** kendall-rank-correlation (seq1 seq2)
Returns the Kendall "tau" rank correlation coefficient.
*** Distributions
Distributions are CLOS objects, and they are created by the constructor
of the same name. The objects support the methods CDF (cumulative
distribution function), DENSITY (MASS for discrete distributions),
QUANTILE, RAND (gives a random number according to the given distribution),
RAND-N (convenience function that gives n random numbers), MEAN and
VARIANCE (giving the distribution's mean and variance, respectively).
These take the distribution as their first parameter.

Most distributions can also be created with an estimator constructor.
The estimator function has the form <distribution>-ESTIMATE, unless noted.

The following distributions are supported:
**** beta-distribution
- Parameters: shape1 shape2
**** binomial-distribution
- Parameters: size, probability
**** cauchy-distribution
- Parameters: location, scale
**** chi-square-distribution
- Parameters: degree
- Estimators: [none]
**** exponential-distribution
- Parameters: hazard (or scale)
**** f-distribution
- Parameters: degree1 degree2
- Estimators: [none]
**** gamma-distribution
- Parameters: scale, shape
- (Variant: erlang-distribution [shape is an integer])
- Numerical calculation:
  If there is a numerical problem with QUANTILE, QUANTILE-ILI would be solve it.\\
  ILI is abbreviation of the numerical calculation method of Inverse-Linear-Interpolation.\\
  However this is slower than Newton-Raphson(for QUANTILE).
**** geometric-distribution
- Parameters: probability
- (Supported on k = 1, 2, ... (the # of trials until a success, inclusive))
**** hypergeometric-distribution
- Parameters: elements, successes, samples
- Estimators: hypergeometric-distribution-estimate-successes-unbiased,
    hypergeometric-distribution-estimate-successes-maximum-likelihood,
    hypergeometric-distribution-estimate-elements
**** logistic-distribution
- Parameters: location, scale
**** log-normal-distribution
- Parameters: expected-value, deviation
- Estimators: log-normal-distribution-estimate-unbiased,
    log-normal-distribution-estimate-maximum-likelihood
**** negative-binomial-distribution
- Parameters: successes, probability, failuresp
- Estimators: negative-binomial-distribution-estimate-unbiased,
    negative-binomial-distribution-estimate-maximum-likelihood
- When failuresp is NIL, the distribution is supported on k = s, s+1, ...
  (the # of trials until a given number of successes, inclusive))
- When failuresp is T (the default), it is supported on k = 0, 1, ...
  (the # of failures until a given number of successes, inclusive)
- Estimators also have the failuresp parameter
- (Variant: geometric-distribution [successes = 1, failuresp = nil])
**** normal-distribution
- Parameters: expected-value, deviation
- Estimators: normal-distribution-estimate-unbiased,
    normal-distribution-estimate-maximum-likelihood
- (Variant: standard-normal-distribution)
**** poisson-distribution
- Parameters: rate
**** t-distribution
- Parameters: degree
- Estimators: [none]
**** uniform-distribution
- Parameters: from, to
- Estimators: uniform-distribution-estimate-moments,
    uniform-distribution-estimate-maximum-likelihood
- (Variant: standard-uniform-distribution)
**** weibull-distribution
- Parameters: scale, shape
*** Distribution tests
**** normal-dist-test
- Input: frequation sequence, infimum of the first class, class width, precision
- Output( 3 values of property-list )
    - result (:TOTAL total-frequency :MEAN mean :VARIANCE variance :SD standard-deviation)
    - table (:MID mid-value-of-each-class :FREQ frequency-of-each-class :Z standard-score :CDF cummulative-distribution-frequency :EXPECTATION expectation)
    - result2 (:CHI-SQ Chi-square-statistics :D.F. Degree-of-freedom :P-VALUE p-value)
**** poisson-dist-test
- Input: sequence of frequency
- Output( 3 values of p-list )
    - result (:N total-frequency :MEAN mean)
    - table (:C-ID assumed-class-value :FREQ frequency :P probability :E expectation)
    - result2 (:CHI-SQ Chi-square-statistics :D.F. Degree-of-freedom :P-VALUE p-value)
**** binom-dist-test
- Input: sequence of frequency, sequence of class-value, size of Bernoulli trials
- Output( 3 values of p-list )
    - result (:D-SIZE total-frequency :PROBABILITY population-rate)
    - table (:FREQ frequency :P probability :E expectation)
    - result2 (:CHI-SQ Chi-square-statistics :D.F. Degree-of-freedom :P-VALUE p-value)

*** Outlier verification
**** smirnov-grubbs (seq alpha &key (type :max) (recursive nil))
Smirnov-Grubbs method for outlier verification.
- return: nil | sequence
- arguments:
  - seq   : <sequence of number>
  - alpha : <number> , significance level
  - type  : :min | :max, which side of outlier value
  - recursive : nil | t
- reference: http://aoki2.si.gunma-u.ac.jp/lecture/Grubbs/Grubbs.html

*** Sample listener log
**** QUOTE Loading without ASDF
(assuming you are in the directory where the library resides)
CL-USER> (load "package")
T
CL-USER> (load "utilities")
T
CL-USER> (load "math")
T
CL-USER> (load "statistics")
T
CL-USER> (load "distribution-test")
T
CL-USER> (in-package :statistics)
#<PACKAGE "STATISTICS">
STAT> 
**** QUOTE Loading with ASDF
(assuming that the path to statistics.asd is in ASDF:*CENTRAL-REGISTRY*)
CL-USER> (asdf:operate 'asdf:load-op 'statistics)
; loading system definition from ~/.sbcl/systems/statistics.asd
; into #<PACKAGE "ASDF0">
; registering #<SYSTEM :STATISTICS {B65C489}> as STATISTICS
NIL
CL-USER> (in-package :statistics)
#<PACKAGE "STATISTICS">
STAT> 
**** Simple usage (examples taken from "Lisp-Stat$B$K$h$kE}7W2r@OF~Lg(B" by $B?b?e6&G7(B)
***** QUOTE One-valued data
STAT> (defparameter height '(148 160 159 153 151 140 156 137 149 160 151 157 157 144))
HEIGHT
STAT> (mean height)
1061/7
STAT> (+ (mean height) 0.0d0)
151.57142857142858d0
STAT> (median height)
152
STAT> (five-number-summary height)
(137 297/2 152 157 160)
STAT> (mapcar (lambda (x) (discrete-quantile height x)) '(0 1/4 1/2 3/4 1))
(137 297/2 152 157 160)
STAT> (interquartile-range height)
17/2
STAT> (+ (mean-deviation height) 0.0d0)
5.857142857142857d0
STAT> (+ (variance height) 0.0d0)
50.10204081632653d0
STAT> (standard-deviation height)
7.345477789500419d0
STAT> 
***** QUOTE Two-valued data
STAT> (defparameter weight '(41 49 45 43 42 29 49 31 47 47 42 39 48 36))
WEIGHT
STAT> (linear-regression height weight)
(-70.15050916496945d0 0.7399185336048879d0)
STAT> (+ (covariance height weight) 0.0d0)
39.92307692307692d0
STAT> (correlation-coefficient height weight)
0.851211920646571d0
STAT> (defparameter baseball-teams '((3 2 1 5 4 6) (2 6 3 5 1 4))
	"Six baseball teams are ranked by two people in order of liking.")
BASEBALL-TEAMS
STAT> (+ (apply #'spearman-rank-correlation baseball-teams) 0.0d0)
0.02857142857142857d0
STAT> (+ (apply #'kendall-rank-correlation baseball-teams) 0.0d0)
-0.06666666666666667d0
STAT> 
***** QUOTE Distributions
STAT> (quantile (standard-normal-distribution) 0.025d0)
-1.9599639551896222d0
STAT> (density (standard-uniform-distribution) 1.5d0)
0
STAT> (cdf (standard-uniform-distribution) 0.3d0)
0.3d0
STAT> (defparameter normal-random (rand-n (standard-normal-distribution) 1000))
NORMAL-RANDOM
STAT> (five-number-summary normal-random)
(-3.048454339464769d0 -0.6562483981626692d0 -0.0378855048937908d0
 0.6292440569288786d0 3.3461196116924925d0)
STAT> (mean normal-random)
-0.003980893528421081d0
STAT> (standard-deviation normal-random)
0.9586638291006542d0
STAT> (quantile (t-distribution 5) 0.05d0)
-2.0150483733330242d0
STAT> (density (t-distribution 10) 1.0d0)
0.23036198922913856d0
STAT> (defparameter chi-random (rand-n (chi-square-distribution 10) 1000))
CHI-RANDOM
STAT> (mean chi-random)
10.035727383909936d0
STAT> (standard-deviation chi-random)
4.540307733714504d0
STAT> 
***** QUOTE Distribution tests (examples taken from http://aoki2.si.gunma-u.ac.jp/R/)
STAT(6): (normal-dist-test '(4 19 86 177 105 33 2) 40 5 0.1)
(:TOTAL 426 :MEAN 57.931225 :VARIANCE 26.352928 :SD 5.13351)
(:MID (37.45 42.45 47.45 52.45 57.45 62.45 67.45 72.45 77.45) :FREQ
(0 4 19 86 177 105 33 2 0) :Z
(-3.5027153 -2.5287228 -1.5547304 -0.58073795 0.3932545 1.3672462
 2.3412387 3.315231 4.2892237)
:CDF
(2.3027066827641107d-4 0.005493650023016494d0 0.0542812231219722d0
 0.2207033969433026d0 0.3722256949242654d0 0.2612916822967053d0
 0.07616414571442975d0 0.009152099332533692d0 4.578369754981715d-4)
:EXPECTATION
(0.09809530468575112d0 2.4383902144907776d0 23.123801049960157d0
 94.01964709784691d0 158.56814603773705d0 111.31025665839645d0
 32.44592607434708d0 4.093832867221574d0 0.19503855156222105d0))
(:CHI-SQ 6.000187256825313d0 :D.F. 4 :P-VALUE 0.19913428945535006d0)

STAT(10): (poisson-dist-test '(27 61 77 71 54 35 20 11 6 2 1))
(:N 365 :MEAN 1092/365)
(:C-ID (0 1 2 3 4 5 6 7 8 9 ...) :FREQ (27 61 77 71 54 35 20 11 6 2 ...)
 :P
 (0.050197963 0.1501813 0.22465476 0.22403927 0.1675691 0.100266
  0.04999565 0.021368004 0.0079910485 0.002656385 ...)
 :E
 (18.322256 54.816174 81.998985 81.77434 61.162724 36.59709 18.248411
  7.7993217 2.9167328 0.96958053 ...))
(:CHI-SQ 14.143778 :D.F. 8 :P-VALUE 0.07809402061210624d0)

STAT(16): (binom-dist-test '(2 14 20 34 22 8) '(0 1 2 3 4 5) 5)
                           (binom-dist-test '(2 14 20 34 22 8) '(0 1 2 3 4 5) 5)
(:SIZE 6 :PROBABILITY 0.568)
(:FREQ (2 14 20 34 22 8) :P
 (0.015045918 0.098912984 0.26010454 0.3419893 0.22482634 0.059121) :E
 (1.5045917 9.891298 26.010454 34.198933 22.482634 5.9121003))
(:CHI-SQ 4.007576 :D.F. 4 :P-VALUE 0.4049815220790788d0)
***** QUOTE Outlier verification
STAT(6): (defparameter *sample*
             '(133 134 134 134 135 135 139 140 140 140 141 142 142 144 144 147 147 149 150 164))

STAT(7): (smirnov-grubbs *sample* 0.05 :type :max)
Data: MAX = 164.000
t= 3.005, p-value = 2.557, df = 18

STAT(8): (smirnov-grubbs *sample* 0.05 :type :min)
Data: MIN = 133.000
t= 1.172, p-value = 2.557, df = 18

STAT(11): (smirnov-grubbs *sample* 0.05 :type :max :recursive t)
(133 134 134 134 135 135 139 140 140 140 ...)

STAT(12): (set-difference *sample* *)
(164)
** Notes
- Numbers are not converted to (double) floats, for better accuracy with
  whole number data. This should be OK, since double data will generate
  double results (the number type is preserved).
- Places marked with TODO are not optimal or not finished (see the TODO
  file for more details).


* Licensing

CLML is licensed under the terms of the Lisp Lesser GNU Public
License, known as the LLGPL and distributed with CLML as the
file "LICENSE". The LLGPL consists of a preamble and the LGPL, which
is distributed with CLML as the file "LGPL". Where these
conflict, the preamble takes precedence.

The LGPL is also available online at:  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html

The LLGPL is also available online at:  http://opensource.franz.com/preamble.html

* Supported CL implementations
This library supports ANSI Common Lisp. That said there are
differences among implementations. SBCL and Allegro Lisp and Lisp Works should be the
best supported. Currently Clozure Common Lisp is having issues with
certain BLAS functionality so some portions may not work under that
implementation.

Current development is taking place under Linux, that said this
library should function under Windows and OSX.




#+HTML: </div>
